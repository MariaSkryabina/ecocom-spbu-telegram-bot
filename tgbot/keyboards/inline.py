from aiogram import Dispatcher, types


def create_keyboard_for_question(d):

    NOK = "‚ùå"
    OK = "‚úÖ"
    if d == -1:
        buttons = [types.InlineKeyboardButton(text=NOK + "—Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞", callback_data=str(d))]
    else:
        buttons = [types.InlineKeyboardButton(text=OK + "–æ—Ç–≤–µ—á–µ–Ω–æ", callback_data=str(d))]

    question_keyboard = types.InlineKeyboardMarkup(row_width=1)
    question_keyboard.add(*buttons)
    return question_keyboard


def user_start_keyboard():
    buttons = [types.InlineKeyboardButton(text="—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –°–ü–ë–ì–£", callback_data="sort"),
               types.InlineKeyboardButton(text="–∏–Ω—Ñ–æ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ", callback_data="info"),
               types.InlineKeyboardButton(text="—Ñ–∏–¥–±–µ–∫/–≤–æ–ø—Ä–æ—Å", callback_data="message")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


def sorting_keyboard():
    sorting_categories = {"PET": "‚ô≥ PET", "GL": "ü´ô —Å—Ç–µ–∫–ª–æ", "AL": "üñáÔ∏è –∞–ª—é–º–∏–Ω–∏–π", "PAPER": "üì∞ –±—É–º–∞–≥–∞",
                          "PP_HARD": "‚ô∑ PP (—Ç–≤–µ—Ä–¥—ã–π)", "PP_SOFT": "‚ô∑ PP (–º—è–≥–∫–∏–π)", "TP": "üßÉ Tetra Pak", "BT": "üîã–±–∞—Ç–∞—Ä–µ–π–∫–∏",
                          "CAPS": "üîò –∫—Ä—ã—à–µ—á–∫–∏", "BULB": "üí° –ª–∞–º–ø–æ—á–∫–∏", "START": "‚¨Ö –ù–∞–∑–∞–¥"}
    buttons = []
    for key in sorting_categories:
        buttons.append(types.InlineKeyboardButton(text=sorting_categories[key], callback_data=key))
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def sorting_search_options():
    buttons = [types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data = "LIST"),
               types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ", callback_data="NEAR"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def ecocom_info_keyboard():
    button_data = {"WHO": "–ö—Ç–æ –º—ã", "PJ": "–ü—Ä–æ–µ–∫—Ç—ã", "JOIN": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "START": "‚¨Ö –ù–∞–∑–∞–¥"}
    buttons = []
    for key in button_data:
        buttons.append(types.InlineKeyboardButton(text=button_data[key], callback_data=key))
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def who_we_are_keyboard():
    buttons = [types.InlineKeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º", callback_data="send_document"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)

    return keyboard


def send_doc_about_ecocom_keyboard():
    buttons = [types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask question"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


def projects_keyboard():
    buttons = [types.InlineKeyboardButton(text="–•–æ—á—É —Å –í–∞–º–∏!", callback_data="JOIN"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)

    return keyboard


def back_to_info_keyboard():
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)


def message_to_support_keyboard():
    buttons = [types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask question"),
               types.InlineKeyboardButton(text="–î–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å", callback_data="feedback"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="START")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)

    return keyboard

def forward_feedback():

    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="message")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)

    return keyboard