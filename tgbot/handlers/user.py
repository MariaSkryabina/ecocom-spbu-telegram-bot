from aiogram import Dispatcher, types
from aiogram.types import Message
from aiogram.dispatcher.filters.state import State, StatesGroup
from tgbot.config import Config
from aiogram.dispatcher import FSMContext


class UserStates(StatesGroup):
    initial_state = State()
    waiting_for_the_message_to_forward = State()
    waiting_for_message_from_admin = State()


async def user_start(message: Message, state: FSMContext):
    text = ["–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª"]
    buttons = [types.InlineKeyboardButton(text="—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –°–ü–ë–ì–£", callback_data="sort"),
               types.InlineKeyboardButton(text="–∏–Ω—Ñ–æ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ", callback_data="info"),
               types.InlineKeyboardButton(text="—Ñ–∏–¥–±–µ–∫/–≤–æ–ø—Ä–æ—Å", callback_data="ask")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer('\n'.join(text), reply_markup=keyboard)
    await state.set_state(UserStates.initial_state.state)


async def user_start_back(call: types.CallbackQuery):
    text = ["–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª"]
    buttons = [types.InlineKeyboardButton(text="—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –°–ü–ë–ì–£", callback_data="sort"),
               types.InlineKeyboardButton(text="–∏–Ω—Ñ–æ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ", callback_data="info"),
               types.InlineKeyboardButton(text="—Ñ–∏–¥–±–µ–∫/–≤–æ–ø—Ä–æ—Å", callback_data="feedback")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def sorting(call: types.CallbackQuery):
    text = ["–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ—á–∫–∞—Ö –ø—Ä–∏–µ–º–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –Ω–∞—à–µ–≥–æ "
            "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.", "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Ñ—Ä–∞–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:"]

    buttons = [types.InlineKeyboardButton(text="‚ô≥ PET", callback_data="PET"),
               types.InlineKeyboardButton(text="ü´ô —Å—Ç–µ–∫–ª–æ", callback_data="GL"),
               types.InlineKeyboardButton(text="üñáÔ∏è –∞–ª—é–º–∏–Ω–∏–π", callback_data="AL"),
               types.InlineKeyboardButton(text="üì∞ –±—É–º–∞–≥–∞", callback_data="PAPER"),
               types.InlineKeyboardButton(text="‚ô∑ PP", callback_data="PP"),
               types.InlineKeyboardButton(text="üßÉ Tetra Pak", callback_data="TP"),
               types.InlineKeyboardButton(text="üîã–±–∞—Ç–∞—Ä–µ–π–∫–∏", callback_data="BT"),
               types.InlineKeyboardButton(text="–∫—Ä—ã—à–µ—á–∫–∏", callback_data="CAPS"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="START"),
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def pet(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ PET –ø–ª–∞—Å—Ç–∏–∫–∞:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def glass(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ —Å—Ç–µ–∫–ª–∞:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def aluminium(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ –∞–ª—é–º–∏–Ω–∏—è:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def paper(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ –±—É–º–∞–≥–∏:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def pp(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É 5 –ø–ª–∞—Å—Ç–∏–∫–∞:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def tetra_pak(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ Tetra Pak:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def batteries(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ –±–∞—Ç–∞—Ä–µ–µ–∫:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def caps(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ –∫—Ä—ã—à–µ—á–µ–∫:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def info(call: types.CallbackQuery):
    text = ["–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"]

    buttons = [types.InlineKeyboardButton(text="–ö—Ç–æ –º—ã", callback_data="WHO"),
               types.InlineKeyboardButton(text="–ü—Ä–æ–µ–∫—Ç—ã", callback_data="PJ"),
               types.InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–µ–º–µ—Å—Ç—Ä–∞", callback_data="PLAN"),
               types.InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="JOIN"),
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def who(call: types.CallbackQuery):
    text = ["–ö—Ç–æ –º—ã —Ç–∞–∫–∏–µ? –ö—Ç–æ –∑–Ω–∞–µ—Ç –Ω–∞—Å.....–Ω–∏–∫—Ç–æ:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def projects(call: types.CallbackQuery):
    text = ["–ï—Å—Ç—å Vegan Week, –û–¥–µ—Ç—å—Å—è –Ω–∞ —Å—Ç–∏–ø–µ–Ω–¥–∏—é, —Å–±–æ—Ä –≤—Ç–æ—Ä—Å—ã—Ä—å—è"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def mero(call: types.CallbackQuery):
    text = ["20 –Ω–æ—è–±—Ä—è —Å–±–æ—Ä –≤—Ç–æ—Ä—Å—ã—Ä—å—è –≤ –ø—É–Ω–∫–µ"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def join(call: types.CallbackQuery):
    text = ["–•–æ—á–µ—à—å –≤—Å–µ –≤—Ä–µ–º—è –¥—É–º–∞—Ç—å –æ –Ω–∞—Å?:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def feedback(call: types.CallbackQuery, state: FSMContext):
    text = ["–•–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç–∫–æ–∫–æ–º—É? –ü–∏—à–∏—Ç–µ! –ò –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —è –ø–µ—Ä–µ—à–ª—é –æ—Ç–≤–µ—Ç."]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="feedback")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await state.set_state(UserStates.waiting_for_the_message_to_forward.state)


async def forward_message(message: Message, config: Config):
    text = ["–°–æ–æ–±—â–µ–Ω–∏–µ —ç–∫–æ–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç."]
    await message.bot.send_message(
        config.tg_bot.support_ids[0],
        message.html_text + f"\n\n#id{message.from_user.id}", parse_mode="HTML"
    )
    await message.answer('\n'.join(text))


def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_callback_query_handler(user_start_back, text="START", state="*")
    dp.register_callback_query_handler(sorting, text="sort", state="*")
    dp.register_callback_query_handler(pet, text="PET", state="*")
    dp.register_callback_query_handler(glass, text="GL", state="*")
    dp.register_callback_query_handler(aluminium, text="AL", state="*")
    dp.register_callback_query_handler(paper, text="PAPER", state="*")
    dp.register_callback_query_handler(pp, text="PP", state="*")
    dp.register_callback_query_handler(tetra_pak, text="TP", state="*")
    dp.register_callback_query_handler(batteries, text="BT", state="*")
    dp.register_callback_query_handler(caps, text="CAPS", state="*")
    dp.register_callback_query_handler(info, text="info", state="*")
    dp.register_callback_query_handler(who, text="WHO", state="*")
    dp.register_callback_query_handler(projects, text="PJ", state="*")
    dp.register_callback_query_handler(mero, text="PLAN", state="*")
    dp.register_callback_query_handler(join, text="JOIN", state="*")
    dp.register_callback_query_handler(feedback, text="ask", state="*")
    dp.register_message_handler(forward_message,  state=UserStates.waiting_for_the_message_to_forward)
