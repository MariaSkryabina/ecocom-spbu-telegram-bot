from aiogram import Dispatcher, types
from aiogram.types import Message
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


class UserStates(StatesGroup):
    choosing_in_main_menu = State()
    choosing_in_second_menu = State()
    choosing_in_third_menu = State()


async def user_start(message: Message):
    text = ["–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª"]
    buttons = [types.InlineKeyboardButton(text="—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –°–ü–ë–ì–£", callback_data="sort"),
               types.InlineKeyboardButton(text="–∏–Ω—Ñ–æ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ", callback_data="info"),
               types.InlineKeyboardButton(text="—Ñ–∏–¥–±–µ–∫/–≤–æ–ø—Ä–æ—Å", callback_data="feedback")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer('\n'.join(text), reply_markup=keyboard)
    await UserStates.choosing_in_main_menu.set()


async def user_start_back(call: types.CallbackQuery):
    text = ["–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª"]
    buttons = [types.InlineKeyboardButton(text="—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –°–ü–ë–ì–£", callback_data="sort"),
               types.InlineKeyboardButton(text="–∏–Ω—Ñ–æ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ", callback_data="info"),
               types.InlineKeyboardButton(text="—Ñ–∏–¥–±–µ–∫/–≤–æ–ø—Ä–æ—Å", callback_data="feedback")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await UserStates.choosing_in_main_menu.set()


async def sorting(call: types.CallbackQuery):
    text = ["–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ—á–∫–∞—Ö –ø—Ä–∏–µ–º–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –Ω–∞—à–µ–≥–æ "
            "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.", "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Ñ—Ä–∞–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:"]

    buttons = [types.InlineKeyboardButton(text="‚ô≥ PET", callback_data="PET"),
               types.InlineKeyboardButton(text="ü´ô —Å—Ç–µ–∫–ª–æ", callback_data="GL"),
               types.InlineKeyboardButton(text="üñáÔ∏è –∞–ª—é–º–∏–Ω–∏–π", callback_data="AL"),
               types.InlineKeyboardButton(text="üì∞ –±—É–º–∞–≥–∞", callback_data="PAPER"),
               types.InlineKeyboardButton(text="‚ô∑ PP", callback_data="PP"),
               types.InlineKeyboardButton(text="üßÉ Tetra Pak", callback_data="TP"),
               types.InlineKeyboardButton(text="–±–∞—Ç–∞—Ä–µ–π–∫–∏", callback_data="BT"),
               types.InlineKeyboardButton(text="–∫—Ä—ã—à–µ—á–∫–∏", callback_data="CAPS"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="START"),
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await UserStates.next()


async def pet(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ PET –ø–ª–∞—Å—Ç–∏–∫–∞:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await UserStates.next()


async def glass(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ —Å—Ç–µ–∫–ª–∞:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await UserStates.next()


async def aluminium(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ –∞–ª—é–º–∏–Ω–∏—è:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await UserStates.next()


async def paper(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ –±—É–º–∞–≥–∏:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await UserStates.next()


async def pp(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É 5 –ø–ª–∞—Å—Ç–∏–∫–∞:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await UserStates.next()


async def tetra_pak(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ Tetra Pak:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await UserStates.next()


async def batteries(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ –±–∞—Ç–∞—Ä–µ–µ–∫:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await UserStates.next()


async def caps(call: types.CallbackQuery):
    text = ["–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Ç–æ—á–∫—É –ø—Ä–∏—ë–º–∞ –∫—Ä—ã—à–µ—á–µ–∫:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await UserStates.next()


def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_callback_query_handler(user_start_back, text="START", state="*")
    dp.register_callback_query_handler(sorting, text="sort", state="*")
    dp.register_callback_query_handler(pet, text="PET", state="*")
    dp.register_callback_query_handler(glass, text="GL", state="*")
    dp.register_callback_query_handler(aluminium, text="AL", state="*")
    dp.register_callback_query_handler(paper, text="PAPER", state="*")
    dp.register_callback_query_handler(pp, text="PP", state="*")
    dp.register_callback_query_handler(tetra_pak, text="TP", state="*")
    dp.register_callback_query_handler(batteries, text="BT", state="*")
    dp.register_callback_query_handler(caps, text="CAPS", state="*")
