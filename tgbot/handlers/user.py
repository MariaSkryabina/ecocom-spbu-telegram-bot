from aiogram import Dispatcher, types
from aiogram.types import Message
from aiogram.dispatcher.filters.state import State, StatesGroup
from tgbot.config import Config
from aiogram.dispatcher import FSMContext
import tgbot.misc.messages.messages as messages


class UserStates(StatesGroup):
    initial_state = State()
    writing_question_to_forward = State()
    writing_feedback_to_forward = State()
    waiting_for_message_from_admin = State()
    feedback_forwarded = State()
    dialog_with_support_opened = State()


async def user_start(message: Message, state: FSMContext):
    text = ["–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª"]
    buttons = [types.InlineKeyboardButton(text="—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –°–ü–ë–ì–£", callback_data="sort"),
               types.InlineKeyboardButton(text="–∏–Ω—Ñ–æ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ", callback_data="info"),
               types.InlineKeyboardButton(text="—Ñ–∏–¥–±–µ–∫/–≤–æ–ø—Ä–æ—Å", callback_data="message")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer('\n'.join(text), reply_markup=keyboard)
    await state.set_state(UserStates.initial_state.state)


async def user_start_back(call: types.CallbackQuery, state: FSMContext):
    text = ["–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª"]
    buttons = [types.InlineKeyboardButton(text="—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –°–ü–ë–ì–£", callback_data="sort"),
               types.InlineKeyboardButton(text="–∏–Ω—Ñ–æ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ", callback_data="info"),
               types.InlineKeyboardButton(text="—Ñ–∏–¥–±–µ–∫/–≤–æ–ø—Ä–æ—Å", callback_data="message")
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await state.set_state(UserStates.initial_state.state)


async def sorting(call: types.CallbackQuery):
    text = ["–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ—á–∫–∞—Ö –ø—Ä–∏–µ–º–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –Ω–∞—à–µ–≥–æ "
            "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.", "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Ñ—Ä–∞–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:"]

    buttons = [types.InlineKeyboardButton(text="‚ô≥ PET", callback_data="PET"),
               types.InlineKeyboardButton(text="ü´ô —Å—Ç–µ–∫–ª–æ", callback_data="GL"),
               types.InlineKeyboardButton(text="üñáÔ∏è –∞–ª—é–º–∏–Ω–∏–π", callback_data="AL"),
               types.InlineKeyboardButton(text="üì∞ –±—É–º–∞–≥–∞", callback_data="PAPER"),
               types.InlineKeyboardButton(text="‚ô∑ PP", callback_data="PP"),
               types.InlineKeyboardButton(text="üßÉ Tetra Pak", callback_data="TP"),
               types.InlineKeyboardButton(text="üîã–±–∞—Ç–∞—Ä–µ–π–∫–∏", callback_data="BT"),
               types.InlineKeyboardButton(text="üîò –∫—Ä—ã—à–µ—á–∫–∏", callback_data="CAPS"),
               types.InlineKeyboardButton(text="üí° –ª–∞–º–ø–æ—á–∫–∏", callback_data="BULB"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="START"),
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def pet(call: types.CallbackQuery):
    text = ["–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –†–°–û –∏–ª–∏ –Ω–∞–π—Ç–∏ 5 —Ä—è–¥–æ–º! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É)"]
    buttons = [types.InlineKeyboardButton(text = "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data = "LIST"),
               types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ", callback_data="NEAR"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def glass(call: types.CallbackQuery):
    text = ["–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –†–°–û –∏–ª–∏ –Ω–∞–π—Ç–∏ 5 —Ä—è–¥–æ–º! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É)"]
    buttons = [types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data = "LIST"),
               types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ", callback_data="NEAR"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width = 2)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def aluminium(call: types.CallbackQuery):
    text = ["–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –†–°–û –∏–ª–∏ –Ω–∞–π—Ç–∏ 5 —Ä—è–¥–æ–º! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É)"]
    buttons = [types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data = "LIST"),
               types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ", callback_data="NEAR"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width = 2)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def paper(call: types.CallbackQuery):
    text = ["–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –†–°–û –∏–ª–∏ –Ω–∞–π—Ç–∏ 5 —Ä—è–¥–æ–º! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É)"]
    buttons = [types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data = "LIST"),
               types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ", callback_data="NEAR"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def pp(call: types.CallbackQuery):
    text = ["–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –†–°–û –∏–ª–∏ –Ω–∞–π—Ç–∏ 5 —Ä—è–¥–æ–º! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É)"]
    buttons = [types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data = "LIST"),
               types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ", callback_data="NEAR"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def tetra_pak(call: types.CallbackQuery):
    text = ["–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –†–°–û –∏–ª–∏ –Ω–∞–π—Ç–∏ 5 —Ä—è–¥–æ–º! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É)"]
    buttons = [types.InlineKeyboardButton(text = "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data = "LIST"),
               types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ", callback_data="NEAR"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def batteries(call: types.CallbackQuery):
    text = ["–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –†–°–û –∏–ª–∏ –Ω–∞–π—Ç–∏ 5 —Ä—è–¥–æ–º! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É)"]
    buttons = [types.InlineKeyboardButton(text = "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data = "LIST"),
               types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ", callback_data="NEAR"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def caps(call: types.CallbackQuery):
    text = ["–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –†–°–û –∏–ª–∏ –Ω–∞–π—Ç–∏ 5 —Ä—è–¥–æ–º! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É)"]
    buttons = [types.InlineKeyboardButton(text = "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data = "LIST"),
               types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ", callback_data="NEAR"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await UserStates.next()


async def bulbs(call: types.CallbackQuery):
    text = ["–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –†–°–û –∏–ª–∏ –Ω–∞–π—Ç–∏ 5 —Ä—è–¥–æ–º! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É)"]
    buttons = [types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="LIST"),
               types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ", callback_data="NEAR"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def make_list(call: types.CallbackQuery):
    text = ["–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫. "
            "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–µ–ª–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ü–∏—Ñ—Ä–µ –º—ã –¥–µ–ª–∞—Ç—å –Ω–µ –±—É–¥–µ–º."]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def show_near(call: types.CallbackQuery):
    text = ["–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫. "
            "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–µ–ª–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ü–∏—Ñ—Ä–µ –º—ã –¥–µ–ª–∞—Ç—å –Ω–µ –±—É–¥–µ–º."]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="sort")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def info(call: types.CallbackQuery):
    text = ["–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"]

    buttons = [types.InlineKeyboardButton(text="–ö—Ç–æ –º—ã", callback_data="WHO"),
               types.InlineKeyboardButton(text="–ü—Ä–æ–µ–∫—Ç—ã", callback_data="PJ"),
               types.InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="JOIN"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="START"),
               ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def who(call: types.CallbackQuery):
    text = messages.who_we_are
    buttons = [types.InlineKeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º", callback_data="send_document"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def send_document_about_ecocom(call: types.CallbackQuery):
    text = messages.send_document
    buttons = [types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask question"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def projects(call: types.CallbackQuery):
    text = messages.projects
    buttons = [types.InlineKeyboardButton(text="–•–æ—á—É —Å –í–∞–º–∏!", callback_data="JOIN"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def join(call: types.CallbackQuery):
    text = ["–•–æ—á–µ—à—å –≤—Å–µ –≤—Ä–µ–º—è –¥—É–º–∞—Ç—å –æ –Ω–∞—Å?:"]
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def message_to_support(call: types.CallbackQuery):
    text = messages.support_initial
    buttons = [types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask question"),
               types.InlineKeyboardButton(text="–î–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å", callback_data="feedback"),
               types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="START")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()


async def ask_question(call: types.CallbackQuery, state: FSMContext):
    text = messages.question_initial
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await state.set_state(UserStates.writing_question_to_forward.state)


async def give_feedback(call: types.CallbackQuery, state: FSMContext):
    text = messages.feedback_initial
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="info")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer('\n'.join(text), reply_markup=keyboard)
    await call.answer()
    await state.set_state(UserStates.writing_feedback_to_forward.state)


async def forward_feedback(message: Message, config: Config, state:FSMContext):
    text = messages.feedback_final
    await message.bot.send_message(
        config.tg_bot.support_ids[0],
        "#feedback" + f"\n\n{message.html_text}" + f"\n\n#id{message.from_user.id}", parse_mode="HTML"
    )
    buttons = [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="message")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer('\n'.join(text), reply_markup=keyboard)
    await state.set_state(UserStates.feedback_forwarded.state)


def create_keyboard_for_question(d):

    NOK = "‚ùå"
    OK = "‚úÖ"
    if d == -1:
        buttons = [types.InlineKeyboardButton(text=NOK + "—Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞", callback_data=str(d))]
    else:
        buttons = [types.InlineKeyboardButton(text=OK + "–æ—Ç–≤–µ—á–µ–Ω–æ", callback_data=str(d))]

    question_keyboard = types.InlineKeyboardMarkup(row_width=1)
    question_keyboard.add(*buttons)
    return question_keyboard


async def forward_question(message: Message, config: Config, state: FSMContext):

    text = messages.question_final
    keyboard_for_support = create_keyboard_for_question(d=-1)

    await message.bot.send_message(
        config.tg_bot.support_ids[0],
        "#question" + f"\n\n{message.html_text}" + f"\n\n#id{message.from_user.id}", parse_mode="HTML",
        reply_markup=keyboard_for_support
    )
    await message.answer('\n'.join(text))
    # await state.set_state(UserStates.dialog_with_support_opened.state)


def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_callback_query_handler(user_start_back, text="START", state="*")
    dp.register_callback_query_handler(sorting, text="sort", state="*")
    dp.register_callback_query_handler(pet, text="PET", state="*")
    dp.register_callback_query_handler(glass, text="GL", state="*")
    dp.register_callback_query_handler(aluminium, text="AL", state="*")
    dp.register_callback_query_handler(paper, text="PAPER", state="*")
    dp.register_callback_query_handler(pp, text="PP", state="*")
    dp.register_callback_query_handler(tetra_pak, text="TP", state="*")
    dp.register_callback_query_handler(batteries, text="BT", state="*")
    dp.register_callback_query_handler(caps, text="CAPS", state="*")
    dp.register_callback_query_handler(bulbs, text="BULB", state="*")
    dp.register_callback_query_handler(make_list, text="LIST", state="*")
    dp.register_callback_query_handler(show_near, text= "NEAR", state="*")
    dp.register_callback_query_handler(info, text="info", state="*")
    dp.register_callback_query_handler(who, text="WHO", state="*")
    dp.register_callback_query_handler(projects, text="PJ", state="*")
    dp.register_callback_query_handler(join, text="JOIN", state="*")
    dp.register_callback_query_handler(message_to_support, text="message", state="*")
    dp.register_callback_query_handler(ask_question, text="ask question", state="*")
    dp.register_callback_query_handler(give_feedback, text="feedback", state="*")
    dp.register_callback_query_handler(send_document_about_ecocom, text="send_document", state="*")
    dp.register_message_handler(forward_question, state=UserStates.writing_question_to_forward)
    dp.register_message_handler(forward_feedback, state=UserStates.writing_feedback_to_forward)
    # dp.register_callback_query_handler(stop_chatting, text="stop", state="*")
